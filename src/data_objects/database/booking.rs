//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.13

use chrono::NaiveDateTime;
use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(table_name = "booking")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub booking_pk: i32,
    pub date_start: DateTimeWithTimeZone,
    pub date_end: DateTimeWithTimeZone,
    pub with_breakfast: Option<bool>,
    pub valid: Option<bool>,
    pub room_fk: Option<i32>,
    pub num_full_aged_guests: Option<i32>,
    pub num_children: Option<i32>,
    pub checked_in: Option<bool>,
    pub created_at: Option<DateTime>,
}


#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation, Serialize)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::room::Entity",
        from = "Column::RoomFk",
        to = "super::room::Column::RoomPk",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Room,
}

impl Related<super::room::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Room.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
