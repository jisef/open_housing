//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.13

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "booking")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub booking_pk: i32,
    pub date_start: Date,
    pub date_end: Date,
    pub with_breakfast: Option<bool>,
    pub num_full_aged_guests: Option<i32>,
    pub num_children: Option<i32>,
    pub checked_in: Option<bool>,
    pub created_at: Option<DateTime>,
    pub checked_out: Option<bool>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::room_booking::Entity")]
    RoomBooking,
}

impl Related<super::room_booking::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RoomBooking.def()
    }
}

impl Related<super::room::Entity> for Entity {
    fn to() -> RelationDef {
        super::room_booking::Relation::Room.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::room_booking::Relation::Booking.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
