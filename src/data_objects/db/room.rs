//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.13

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "room")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub room_pk: i32,
    pub number: Option<i32>,
    pub name: Option<String>,
    pub capacity: Option<i32>,
    pub max_capacity: Option<i32>,
    pub is_apartment: Option<bool>,
    pub has_kitchen: Option<bool>,
    pub bedrooms: Option<i32>,
    pub valid: Option<bool>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::booking::Entity")]
    Booking,
    #[sea_orm(has_many = "super::roomphotos::Entity")]
    Roomphotos,
}

impl Related<super::booking::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Booking.def()
    }
}

impl Related<super::roomphotos::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Roomphotos.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
